# Add lines to nameMaker() and unitMaker() as required, to handle
# column names that are not yet handled.

#' Read an IOS-formatted CTD file
#'
#' This is a preliminary version of a function intended to read a data-file format
#' employed at the Institution of Ocean Sciences, of the Department of Fisheries
#' and Oceans, Canada.  It requires that the `oce` package be installed.
#'
#' @param filename character value specifying the file name
#'
#' @param missingValue numeric value that is to be converted to `NA`. If this is `NULL`,
#' the default, then the value is determined from the file, in the `CHANNEL DETAIL`
#' table within the `FILE` block.
#'
#' @param debug integer value controlling the printing of information
#' that may help in debugging problems. The default, 0, means to work
#' silently; positive values mean that some information should be printed.
#'
#' @examples
#' file <- system.file("extdata", "2007-019-055.ctd", package="dfo")
#' ctd <- read.ctd.ios(file)
#' summary(ctd)
#' plot(ctd)
#'
#' @section Development note:
#' 1. Add lines to nameMaker() and unitMaker() as required, to handle
#'    column names that are not yet handled.
#'
#' @references
#' \url{https://catalogue.cioos.ca/dataset/ios_ctd_profiles}
#'
#' @return [read.ctd.ios()] returns an `oce` object of class `ctd`.
#'
#' @author Dan Kelley
#'
#' @export
read.ctd.ios <- function(filename, missingValue=NULL, debug=0)
{
    nameMaker <- function(name) {
        res <- switch(name,
            "Pressure"="pressure",
            "Depth"="depth",
            "Temperature:Primary"="temperature",
            "Salinity:T0:C0"="salinity",
            "PAR"="par",
            "PAR:Reference"="parReference",
            "Transmissivity"="transmissivity",
            "Fluorescence:URU:Seapoint"="fluorescence",
            "Oxygen:Dissolved:SBE"="oxygen",
            "Number_of_bin_records"="ndata",
            "Nitrate_plus_nitrite:ISUS"="nitrate_plus_nitrite")
        if (is.null(res)) name else res
    }
    unitMaker <- function(unit) {
        switch(unit,
            "decibar"=list(unit=expression(dbar), scale=""),
            "metres"=list(unit=expression(m), scale=""),
            "'deg C (ITS90)'"=list(unit=expression(degree*C), scale="ITS-90"),
            "%/metre"=list(unit=expression("%"/m), scale=""),
            "mg/m^3"=list(unit=expression(mg/m^3), scale=""),
            "uE/m^2/sec"=list(unit=expression(mu*E/m^2/s), scale=""),
            "PSS-78"=list(unit=expression(), scale="PSS-78"),
            "mL/L"=list(unit=expression(ml/l), scale=""),
            "umol/kg"=list(unit=expression(mu*mol/kg), scale=""),
            "volts"=list(unit=expression(V), scale=""),
            "n/a"=list(unit=expression(), scale=""))
    }
    getBlock <- function(lines, blockName) {
        pattern <- paste0("^\\*", blockName, "$")
        blockStart <- grep(pattern, lines)
        n <- length(blockStart)
        if (n == 0)
            stop("This file does not have a block matching \"", pattern, "\"")
        if (n > 1)
            stop("This file has more than one block matching \"", pattern, "\"")
        blockEnd <- grep("^\\*", lines)
        blockEnd <- blockEnd[blockEnd > blockStart][1]
        lines[seq(blockStart, blockEnd-1L)]
    }

    if (!requireNamespace("oce"))
        stop("The 'oce' package must be installed for read.ctd.ios() to work")
    res <- new("ctd")

    lines <- readLines(filename, encoding="latin1")
    endLine <- grep("^\\*END OF HEADER$", lines)
    if (0 == length(endLine))
        stop("file \"", f, "\" does not contain an \"*END OF HEADER\" line")
    headerLines <- lines[seq(1, endLine-1)]
    # LOCATION block (longitude, latitude, station)
    locationBlock <- getBlock(headerLines, "LOCATION")
    tmp <- strsplit(locationBlock[grep("LONGITUDE", locationBlock)], " +")[[1]]
    longitude <- (as.numeric(tmp[4]) + as.numeric(tmp[5])/60) * ifelse(tmp[6] == "W", -1, 1)
    tmp <- strsplit(locationBlock[grep("LATITUDE", locationBlock)], " +")[[1]]
    latitude <- (as.numeric(tmp[4]) + as.numeric(tmp[5])/60) * ifelse(tmp[6] == "S", -1, 1)
    tmp <- strsplit(locationBlock[grep("STATION", locationBlock)], " +")[[1]]
    station <- tmp[4]
    # FILE block (time)
    fileBlock <- getBlock(headerLines, "FILE")
    tmp <- strsplit(fileBlock[grep("START TIME", fileBlock)], " +")[[1]]
    startTime <- as.POSIXct(paste(tmp[6], tmp[7]), tz="UTC")
    # ADMINISTRATION block (cruise, PI and ship)
    administrationBlock <- getBlock(headerLines, "ADMINISTRATION")
    if (debug > 0)
        print(administrationBlock)
    res@metadata$mission <- strsplit(administrationBlock[grep("MISSION", administrationBlock)], "[ ]:[ ]*")[[1]][2]
    res@metadata$agency <- strsplit(administrationBlock[grep("AGENCY", administrationBlock)], "[ ]*:[ ]*")[[1]][2]
    res@metadata$country <- strsplit(administrationBlock[grep("COUNTRY", administrationBlock)], "[ ]*:[ ]*")[[1]][2]
    res@metadata$project <- strsplit(administrationBlock[grep("PROJECT", administrationBlock)], "[ ]*:[ ]*")[[1]][2]
    res@metadata$scientist <- strsplit(administrationBlock[grep("SCIENTIST", administrationBlock)], "[ ]*:[ ]*")[[1]][2]
    res@metadata$platform <- strsplit(administrationBlock[grep("PLATFORM", administrationBlock)], "[ ]*:[ ]*")[[1]][2]

    if (is.null(missingValue)) {
        channelDetailBlockStart <- grep("\\$TABLE: CHANNEL DETAIL", fileBlock)
        missingValue <- as.numeric(strsplit(fileBlock[channelDetailBlockStart + 4L], "[ ]+")[[1]][3])
        if (debug > 0)
            cat("Inferred missingValue as", missingValue, "\n")
    }

    # CHANNELS table, withing FILE block
    channelBlockStart <- grep("\\$TABLE: CHANNELS", fileBlock)
    unitList <- list()
    names <- NULL
    namesOriginal <- list()
    j <- 1 # index to variable names
    for (i in seq(channelBlockStart + 3L, length(fileBlock))) {
        if (length(grep("\\$END", fileBlock[i])))
            break
        thisName <- gsub("^[ ]*[0-9]{1,2}[ ]*([^ ]*) .*$", "\\1", fileBlock[i])
        namesOriginal[[j]] <- thisName
        names[j] <- nameMaker(thisName)
        thisUnit <- gsub("^[ ]*[0-9]{1,2}[ ]*[^ ]*[ ]*([^ ]+|'.*').*$", "\\1", fileBlock[i])
        unitList[[j]] <- unitMaker(thisUnit)
        j <- j + 1
        if (debug > 0) {
            cat(oce::vectorShow(i), msg="  ")
            cat(oce::vectorShow(fileBlock[i], msg="   "))
            cat(oce::vectorShow(thisName, msg="   "))
            cat(oce::vectorShow(thisUnit, msg="   "))
        }
    }
    names <- oce::unduplicateNames(names)
    names(unitList) <- names
    names(namesOriginal) <- names
    dataLines <- lines[seq(endLine+1, length(lines))]
    data <- read.table(filename, skip=1 + endLine, col.names=names)
    data[data == missingValue] <- NA
    res@data <- data
    res@metadata$units <- unitList
    res@metadata$dataNamesOriginal <- namesOriginal
    res@metadata$longitude <- longitude
    res@metadata$latitude <- latitude
    res@metadata$startTime <- startTime
    res@metadata$station <- station
    res@processingLog <- processingLogAppend(res@processingLog,
        paste0("read.ctd.ios(\"", file, "\", missingValue=", missingValue, ", debug=", debug, ")\n"))
    res
}

